<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY I-D.behringer-autonomic-network-framework PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.behringer-homenet-trust-bootstrap.xml">
<!ENTITY I-D.draft-ietf-anima-autonomic-control-plane PUBLIC "" "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.behringer-anima-autonomic-control-plane.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7030 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7030.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC5652 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5652.xml">
<!ENTITY RFC7575 SYSTEM "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7575.xml">
]>
<rfc category="info" docName="draft-ietf-anima-bootstrapping-keyinfra-05-pre1"
     ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc="yes" ?>

  <?rfc compact="yes" ?>

  <?rfc symrefs="yes" ?>

  <?rfc sortrefs="yes"?>

  <?rfc iprnotified="no" ?>

  <?rfc strict="yes" ?>

  <front>
    <title abbrev="BRSKI">Bootstrapping Remote Secure Key Infrastructures
    (BRSKI)</title>

    <author fullname="Max Pritikin" initials="M." surname="Pritikin">
      <organization>Cisco</organization>

      <address>
        <email>pritikin@cisco.com</email>
      </address>
    </author>

    <author fullname="Michael C. Richardson" initials="M."
            surname="Richardson">
      <organization abbrev="SSW">Sandelman Software Works</organization>

      <address>
        <email>mcr+ietf@sandelman.ca</email>

        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <author fullname="Michael H. Behringer" initials="M.H."
            surname="Behringer">
      <organization>Cisco</organization>

      <address>
        <email>mbehring@cisco.com</email>
      </address>
    </author>

    <author fullname="Steinthor Bjarnason" initials="S." surname="Bjarnason">
      <organization>Cisco</organization>

      <address>
        <email>sbjarnas@cisco.com</email>
      </address>
    </author>

    <author fullname="Kent Watsen" initials="K.W." surname="Watsen">
      <organization>Juniper Networks</organization>

      <address>
        <email>kwatsen@juniper.net</email>
      </address>
    </author>

    <date year="2017" />

    <area>Operations and Management</area>

    <workgroup>ANIMA WG</workgroup>

    <abstract>
      <t>This document specifies automated bootstrapping of a remote secure
      key infrastructure (BRSKI) using vendor installed X.509 certificate, in
      combination with a vendor's authorizing service, both online the
      Internet, and offline.
      Bootstrapping a new device can occur using a routable address and a
      cloud service, or using only link-local connectivity, or on
      limited/disconnected networks. Support for lower security models,
      including devices with minimal identity, is described for legacy reasons
      but not encouraged. Bootstrapping is complete when the cryptographic
      identity of the new key infrastructure is successfully deployed to the
      device but the established secure connection can be used to deploy a
      locally issued certificate to the device as well.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>To literally "pull yourself up by the bootstraps" is an impossible
      action. Similarly the secure establishment of a key infrastructure
      without external help is also an impossibility. Today it is commonly
      accepted that the initial connections between nodes are insecure, until
      key distribution is complete, or that domain-specific keying material is
      pre-provisioned on each new device in a costly and non-scalable manner.
      These existing mechanisms are known as non-secured 'Trust on First Use'
      (TOFU) <xref target="RFC7435" />,
      'resurrecting duckling' <xref target="Stajano99theresurrecting" />
      or 'pre-staging'. </t>

      <t>This document describes a zero-touch approach to bootstrapping that
      secures the initial distribution of key material between an unconfigured
      and untouched device called a "Pledge" and the "Registrar" device that
      is a member of an established network domain. The bootstrapping process
      provides a foundation to securely answer the following questions:</t>

      <t><list style="symbols">
          <t>Registrar authenticating the Pledge: "Who is this device? What is
          its identity?"</t>

          <t>Registrar authorization the Pledge: "Is it mine? Do I want it?
          What are the chances it has been compromised?"</t>

          <t>Pledge authenticating the Registrar/Domain: "What is this
          domain's identity?"</t>

          <t>Pledge authorization the Registrar: "Should I join it?"</t>
        </list></t>

      <t>This document details protocols and messages to the endpoints to
      answer the questions. The Registrar actions derive from Pledge identity,
      third party cloud service communications, and local access control
      lists. The Pledge actions derive from a cryptographically protected
      "voucher" message delivered throug the Registrar. Multiple forms of
      "vouchers" are described to support a variety of use cases.</t>

      <t>The syntactic details of vouchers are described in detail in <xref
      target="I-D.ietf-anima-voucher" />, but relevant semantics of
      voucher creation for use in ANIMA are described in this document.</t>

      <t>The result of bootstrapping is that a security association between
      the Pledge and the Registrar is established. A method of leveragine this
      association to optimize PKI enrollment is described. Agility to support
      bootstrapping alternative key infrastructures (such as symmetric key
      solutions) is considered although no such alternate key infrastructure
      is described.</t>
      
      <section title="Secure Imprinting without Vouchers">
          <t>There are pre-existing methods available for establishing initial
              trust. For example the enrollment protocol EST <xref
                  target="RFC7030"></xref> details a set of non-autonomic bootstrapping
              methods such as:</t>
          
          <t><list style="symbols">
              <t>using the Implicit Trust Anchor database (not an autonomic
                  solution because the URL must be securely distributed),</t>
              
              <t>engaging a human user to authorize the CA certificate using
                  out-of-band data (not an autonomic solution because the human user
                  is involved),</t>
              
              <t>using a configured Explicit TA database (not an autonomic
                  solution because the distribution of an explicit TA database is
                  not autonomic),</t>
              
              <t>and using a Certificate-Less TLS mutual authentication method
                  (not an autonomic solution because the distribution of symmetric
                  key material is not autonomic).</t>
          </list>These "touch" methods do not meet the requirements for
          zero-touch.</t>
          
          <t>There are "call home" technologies where the Pledge first
              establishes a connection to a well known vendor service using a common
              client-server authentication model. After mutual authentication
              appropriate credentials to authenticate the target domain are
              transfered to the Pledge. This creates serveral problems and
              limitations:</t>
          
          <t><list style="symbols">
              <t>the pledge requires realtime connectivity to the vendor
                  service,</t>
              
              <t>the domain identity is exposed to the vendor service (this is a
                  privacy concern),</t>
              
              <t>the vendor is responsible for making the authorization
                  decisions (this is a liability concern),</t>
          </list></t>
          
          <t>BRSKI addresses these issues by introducting an authorization layer
              via "vouchers". The additional complexity provides for significant
              flexibility.</t>
      </section> <!-- end Imprint without Voucher -->      

      <section title="Terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
        "OPTIONAL" in this document are to be interpreted as described in
        <xref target="RFC2119"></xref>.</t>

        <t>The following terms are defined for clarity:</t>

        <t><list style="hanging">
            <t hangText="DomainID:">The domain identity is the 160-bit SHA-1
            hash of the BIT STRING of the subjectPublicKey of the domain trust
            anchor that is stored by the Domain CA. This is consistent with
            the Certification Authority subject key identifier (<xref
            target="RFC5280">Section 4.2.1.2</xref>) of the Domain CA's self
            signed root certificate. (A string value bound to the Domain CA's
            self signed root certificate subject and issuer fields is often
            colloquially used as a humanized identity value but during
            protocol discussions the more exact term as defined here is
            used).</t>

            <t hangText="drop ship:">The physical distribution of equipment
            containing the "factory default" configuration to a final
            destination. In zero-touch scenarios there is no staging or
            pre-configuration during drop-ship.</t>

            <t hangText="imprint:">The process where a device obtains the
            cryptographic key material to identify and trust future
            interactions with a network. This term is taken from Konrad
            Lorenz's work in biology with new ducklings: during a critical
            period, the duckling would assume that anything that looks like a
            mother duck is in fact their mother. An equivalent for a device is
            to obtain the fingerprint of the network's root certification
            authority certificate. A device that imprints on an attacker
            suffers a similar fate to a duckling that imprints on a hungry
            wolf. Securely imprinting is a primary focus of this
            document.<xref target="imprinting"></xref>. The analogy to
            Lorenz's work was first noted in <xref
            target="Stajano99theresurrecting"></xref>.</t>

            <t hangText="enrollment:">The process where a device presents key
            material to a network and acquires a network specific identity.
            For example when a certificate signing request is presented to a
            certification authority and a certificate is obtained in
            response.</t>

            <t hangText="Pledge:">The prospective device, which has an
            identity installed by a third-party (e.g., vendor, manufacturer or
            integrator).</t>

            <t hangText="Voucher">A signed statement from the MASA service
            that indicates to a Pledge the cryptographic identity of the
            Registrar it should trust. There are different types of vouchers
            depending on how that trust verified.</t>

            <t hangText="Audit Voucher:">A voucher from the MASA service that
            indicates that the bootstrapping event has been successfully
            logged. The Registrar is primarily responsible for verifying the
            logs and ensuring domain network security.</t>

            <t hangText="Ownership Voucher:">A voucher from the MASA service
            that indicates the explicit owner identity. The MASA is primarily
            responsible for tracking ownership using out-of-band sales channel
            integration (the definition of which is out-of-scope of this
            document). It is defined in <xref
            target="I-D.ietf-netconf-zerotouch"></xref>.</t>

            <t hangText="Domain:">The set of entities that trust a common key
            infrastructure trust anchor. This includes the Proxy, Registrar,
            Domain Certificate Authority, Management components and any
            existing entity that is already a member of the domain.</t>

            <t hangText="Domain CA:">The domain Certification Authority (CA)
            provides certification functionalities to the domain. At a minimum
            it provides certification functionalities to a Registrar and
            stores the trust anchor that defines the domain. Optionally, it
            certifies all elements.</t>

            <t hangText="Registrar:">A representative of the domain that is
            configured, perhaps autonomically, to decide whether a new device
            is allowed to join the domain. The administrator of the domain
            interfaces with a Registrar to control this process. Typically a
            Registrar is "inside" its domain.</t>

            <t hangText="Proxy:">A domain entity that helps the pledge join
            the domain. A Proxy facilitates communication for devices that
            find themselves in an environment where they are not provided
            connectivity until after they are validated as members of the
            domain. The pledge is unaware that they are communicating with a
            proxy rather than directly with a Registrar.</t>

            <t hangText="MASA Service:">A third-party Manufacturer Authorized
            Signing Authority (MASA) service on the global Internet. The MASA
            provides a repository for audit log information concerning privacy
            protected bootstrapping events. It does not track ownership.</t>

            <t hangText="Ownership Tracker">An Ownership Tracker service on
            the global internet. The Ownership Tracker uses business processes
            to accurately track ownership of all devices shipped against
            domains that have purchased them. Although optional this component
            allows vendors to provide additional value in cases where their
            sales and distribution channels allow for accurately tracking of
            such ownership.</t>

            <t hangText="IDevID">An Initial Device Identity X.509 certificate
            installed by the vendor on new equipment. The <xref
            target="IDevID"></xref> certificate format is the primary example.
            In particular the X.509 certificate needs to contain the device's
            serial number in a well known location in order to perform white
            list operations and in order to extract it for inclusion in
            messages to the MASA service. The subject field&rsquo;s DN
            encoding MUST include the &ldquo;serialNumber&rdquo; attribute
            with the device&rsquo;s unique serial number.</t>

            <t hangText="TOFU">Trust on First Use. Used similarly to <xref
            target="RFC7435" />. This is where a Pledge
            device makes no security decisions but rather simply trusts the
            first Registrar it is contacted by. This is also known as the
            "resurrecting duckling" model.</t>
          </list></t>
      </section>

      <section title="Scope of solution">
        <t>Questions have been posed as to whether this solution is suitable
        in general for Internet of Things (IoT) networks. This depends on the
        capabilities of the devices in question. The terminology of <xref
        target="RFC7228"></xref> is best used to describe the boundaries.</t>

        <t>The solution described in this document is aimed in general at
        non-constrained (i.e. class 2+) devices operating on a non-Challenged
        network. The entire solution described here is not intended to be
        useable as-is by constrained devices operating on challenged networks
        (such as 802.15.4 LLNs).</t>

        <t>In many target applications, the systems involved are large router
        platforms with multi-gigabit inter-connections, mounted in controlled
        access data centers. But this solution is not exclusive to the large,
        it is intended to scale to thousands of devices located in hostile
        environments, such as ISP provided CPE devices which are drop-shipped
        to the end user. The situation where an order is fulfilled from
        distributed warehouse from a common stock and shipped directly to the
        target location at the request of the domain owner is explicitly
        supported. That stock ("SKU") could be provided to a number of
        potential domain owners, and the eventual domain owner will not know
        a-priori which device will go to which location.</t>

        <t>The bootstraping process can take minutes to complete depending on
        the network infrastructure and device processing speed. The network
        communication itself is not optimized for speed; the discovery process
        allows for the Pledge to avoid broadcasting for privacy reasons. This
        protocol is not intended for low latency handoffs.</t>

        <t>Specifically, there are protocol aspects described here which might
        result in congestion collapse or energy-exhaustion of intermediate
        battery powered routers in an LLN. Those types of networks SHOULD NOT
        use this solution. These limitations are predominately related to the
        large credential and key sizes required for device authentication.
        Defining symmetric key techniques that meet the operational
        requirements is out-of-scope but the underlying protocol operations
        (TLS handshake and signing structures) have sufficient algorithm
        agility to support such techniques when defined.</t>

        <t>The imprint protocol described here could, however, be used by
        non-energy constrained devices joining a non-constrained network (for
        instance, smart light bulbs are usually mains powered, and speak
        802.11). It could also be used by non-constrained devices across a
        non-energy constrained, but challenged network (such as 802.15.4).</t>

        <t>The use of an IDevID that is consistant with <xref
        target="IDevID"></xref> allows for alignment with 802.1X network
        access control methods which could need to complete before
        bootstrapping can be initiated. This document presumes that network
        access control has either already occured, is not required, or is
        integrated by the proxy and registrar in such a way that the device
        itself does not need to be aware of the details. Further integration
        is not in scope.</t>

        <t>Some aspects are in scope for constrained devices on challenged
        networks: the certificate contents, and the process by which the four
        questions above are resolved is in scope. It is simply the actual
        on-the-wire imprint protocol which is likely inappropriate.</t>
      </section>

      <section title="Trust bootstrap">
        <t>The imprint protocol results in a secure relationship between a
        domain Registrar and the Pledge. If the new device is sufficiently
        constrained that the ACE protocol should be leveraged for operation,
        (see <xref target="I-D.ietf-ace-actors"></xref>), and the domain
        registrar is also the Client Authorization Server or the Authorization
        Server, then it may be appropriate to use this secure channel to
        exchange ACE tokens.</t>
      </section>
    </section>

    <section title="Architectural Overview">
      <t>The logical elements of the bootstrapping framework are described in
      this section. Figure 1 provides a simplified overview of the components.
      Each component is logical and may be combined with other components as
      necessary.</t>

      <t></t>

      <figure>
        <artwork><![CDATA[                                          .
                                          .+------------------------+
   +--------------Drop Ship-------------->.| Vendor Service         |
   |                                      .+------------------------+
   |                                      .| M anufacturer|         |
   |                                      .| A uthorized  |Ownership|
   |                                      .| S igning     |Tracker  |
   |                                      .| A uthority   |         |
   |                                      .+--------------+---------+
   |                                      ..............  ^
   V                                                      |
+-------+     ............................................|...
|       |     .                                           |  .
|       |     .  +------------+       +-----------+       |  .
|       |     .  |            |       |           |       |  .
|Pledge |     .  |   Circuit  |       | Domain    <-------+  .
|       |     .  |   Proxy    |       | Registrar |          .
|       <-------->            <------->           |          .
|       |     .  |            |       |           |          .
|       |     .  +------------+       +-----+-----+          .
|       |     .                             |                .
|       |     .           +-----------------+----------+     .
|       |     .           | Domain Certification       |     .
|       |     .           | Authority                  |     .
+-------+     .           | Management and etc         |     .
              .           +----------------------------+     .
              .                                              .
              ................................................
                            "Domain" components

]]></artwork>

        <postamble>Figure 1</postamble>
      </figure>

      <t>We assume a multi-vendor network. In such an environment there could
      be a Vendor Service for each vendor that supports devices following this
      document's specification, or an integrator could provide a generic
      service authorized by multiple vendors. It is unlikely that an
      integrator could provide Ownership Tracking services for multiple
      vendors due to the required sales channel integrations necessary to
      track ownership.</t>

      <t>The domain is the managed network infrastructure the Pledge is
      managed by. The a domain provides initial device connectivity minimally
      sufficient for bootstrapping through the Circuit Proxy. The Domain
      registrar makes authorization decisions and handles connectivity to the
      vendor services and authenticates the Pledge. Optional cryptographic
      credential and configuration management systems are expected.</t>

      <t>This document describes a secure zero-touch approach to bootstrapping
      a remote key infrastructure. Secure bootstrapping requires mitigating
      the threat of an attacker domain establishing a management role over the
      pledge device. In a "trust on first use" model, where this threat is
      ignored, the attacker has an opportunity to install a persistent malware
      component. This document uses Vouchers to address the threat while
      maintaining a significant level of flexibility.</t>

      <section title="Secure Imprinting without Vouchers">
        <t>There are pre-existing methods available for establishing initial
        trust. For example the enrollment protocol EST <xref
        target="RFC7030"></xref> details a set of non-autonomic bootstrapping
        methods such as:</t>

        <t><list style="symbols">
            <t>using the Implicit Trust Anchor database (not an autonomic
            solution because the URL must be securely distributed),</t>

            <t>engaging a human user to authorize the CA certificate using
            out-of-band data (not an autonomic solution because the human user
            is involved),</t>

            <t>using a configured Explicit TA database (not an autonomic
            solution because the distribution of an explicit TA database is
            not autonomic),</t>

            <t>and using a Certificate-Less TLS mutual authentication method
            (not an autonomic solution because the distribution of symmetric
            key material is not autonomic).</t>
          </list>These "touch" methods do not meet the requirements for
        zero-touch.</t>

        <t>There are "call home" technologies where the Pledge first
        establishes a connection to a well known vendor service using a common
        client-server authentication model. After mutual authentication
        appropriate credentials to authenticate the target domain are
        transfered to the Pledge. This creates serveral problems and
        limitations:</t>

        <t><list style="symbols">
            <t>the pledge requires realtime connectivity to the vendor
            service,</t>

            <t>the domain identity is exposed to the vendor service (this is a
            privacy concern),</t>

            <t>the vendor is responsible for making the authorization
            decisions (this is a liability concern),</t>
          </list></t>

        <t>BRSKI addresses these issues by introducting an authorization layer
        via "vouchers". The additional complexity provides for significant
        flexibility.</t>
      </section>

      <section title="Secure Imprinting using Vouchers">
        <t>A voucher is a cryptographically protected statement to the Pledge
        device indicating authorizing a zero-touch imprint on the Registrar
        domain. </t>

        <t>The format and cryptographic mechanism of vouchers is described in
        detail in <xref target="I-D.ietf-anima-voucher" />. [[EDNOTE: more of this
        will move]].  This section details the semantics as they apply to
        the ANIMA focused BRSKI protocol.</t>

        <t>Generically the voucher imparts the following information to
        the Pledge:</t>

        <t><list style="hanging">
            <t hangText="Assertion Basis">Indicates the method that protects
            the imprint. This might include discrete ownership verification,
            assured logging operation or reliance on Pledge endpoint behavior
            such as secure root of trust of measurement. Only some methods are
            normatively defined in this document. Other methods are left for
            future work. </t>

            <t hangText="Registrar Authentication">Indicates how the Pledge
            can authenticate the Registrar. This might include an indication
            of the PKIX trust anchor used by the Registrar, or an indication
            of shared PKIX trust anchor and additional CN-ID or DNS-ID
            information to complete authentication. Symetric key or other
            methods are left for future work. </t>

            <t hangText="Anti-Replay Protections">Time or nonce based
            information constrain vouchers to time periods or bootstrap
            attempts. </t>
          </list></t>

        <t>A number of boostrapping scenarios can be met using differing
        combinations of this information. All scenarios address the primary
        threat of a MiTM Registrar gaining control over the Pledge device. The
        primary voucher combinations are referred to within this document by
        name:</t>

        <figure>
          <artwork><![CDATA[
             |Assertion   |Registrar ID    |Pledge ID | Validity    |
             |Log-|Veri-  |Trust  |CN-ID or|serial    | RTC | Nonce |
             | ged|  fied |Anchor |DNS-ID  |number    |     |       |
--------------------------------------------------------------------|
Audit        |  X |       | X     |        | X        |     | X     |
-------------|----|-------|-------|--------|----------|-----|-------|
Nonceless    |  X |       | X     |        | X        |     |       |
Audit        |    |       |       |        |          |     |       |
-------------|----|-------|-------|--------|----------|-----|-------|
Owner Audit  |  X |   X   | X     |        | X        |     | X     |
-------------|----|-------|-------|--------|----------|-----|-------|
Owner ID     |    |   X   | ?     |  X     | X        | X   |       |
-------------|----|-------|----------------|----------|-------------|
BearerVoucher|  X |       |   wildcard     | X        | ?           |
-------------|----|-------|----------------|----------|-------------|
MasterVoucher|    |       |   wildcard     | wildcard | X   |       |
-------------|------------|----------------|----------|-----|-------|

]]></artwork>
        </figure>

        <t><list style="hanging">
            <t hangText="Audit Voucher">An Audit Voucher is named after the
            logging assertion mechanisms that the Registrar then "audits" to
            enforce local policy. The Registrar mitigates a MiTM Registrar by
            auditing that an unknown MiTM registrar does not appear in the log
            entries. This does not direct prevent the MiTM but provides a
            response mechanism that ensures the MiTM is unsuccessful. This
            advantage is that actual ownership knowledge is not required on
            the MASA service.</t>

            <t hangText="Nonceless Audit Voucher">An Audit Voucher without a
            validity period statement. Fundamentally the same as an Audit
            Voucher except that it can be issued in advance to support network
            partions or to provide a permanent voucher for remote deployments.
            </t>

            <t hangText="Ownership Audit Voucher">An Audit Voucher where the
            MASA service has verified the Registrar as the authorized owner.
            The MASA service mitigates a MiTM Registrar by refusing to
            generate Audit Voucher's for unauthorized Registrars. The
            Registrar uses audit techniques to suppliment the MASA. This
            provides an ideal sharing of policy decisions and enforcement
            between the vendor and the owner. </t>

            <t hangText="Ownership ID Voucher">An Ownership ID Voucher is
            named after inclusion of the Pledge's CN-ID or DNS-ID within the
            voucher. An example Ownership Voucher is defined in <xref
            target="I-D.ietf-netconf-zerotouch"></xref>. The MASA service
            mitigates a MiTM Registrar by identifying the specific Registrar
            authorized to own the Pledge.</t>

            <t hangText="Bearer Voucher">A Bearer Voucher is named after the
            inclusion of a Registrar ID wildcard. Because the Registrar is not
            specifically identified this voucher type must be treated as a
            secret and protected from exposure as any 'bearer' of the voucher
            can claim the Pledge device. Theoretically "nonced" and
            "nonceless" bearer vouches can exist. Publishing a nonceless
            bearer voucher effectively turns the specified Pledge into a
            "TOFU" device with minimal mitigation against MiTM Registrars.
            </t>

            <t hangText="Master Voucher">A Master Voucher is named after the
            inclusion of a Pledge ID wildcard. Because the Pledge is not
            specifically identified publishing a nonceless Master Voucher
            would turn all Pledges that trust the MASA into TOFU devices. This
            would be a significant security consideration as it puts too much
            power in the hands of the vendor MASA service. Wildcard Pledge IDs
            MUST NOT be accepted. </t>
          </list>[[EDNOTE: Exact definitions of Assertion, ID and Validity
        methods come from the voucher document. Included are normative
        statements on how Registrar and Pledge operate on these informations
        after verifying the voucher]]</t>
      </section>
    </section>

    <section title="Functional Overview">
      <t>Entities behave in an autonomic fashion. They discover each other and
      autonomically bootstrap into a key infrastructure delineating the
      autonomic domain. See <xref target="RFC7575"></xref> for more
      information.</t>

      <t>This section details the state machine and operational flow for each
      of the main three entities. The pledge, the domain (primarily a
      Registrar) and the MASA service.</t>

      <t>A representative flow is shown in Figure 2:</t>

      <figure>
        <artwork><![CDATA[
     +--------+         +---------+    +------------+     +------------+
     | Pledge |         | Circuit |    | Domain     |     | Vendor     |
     |        |         | Proxy   |    | Registrar  |     | Service    |
     |        |         |         |    |            |     | (Internet  |
     +--------+         +---------+    +------------+     +------------+
      |                     |                   |                    |
      |<-RFC3927 IPv4 adr   |                   |                    |
    or|<-RFC4862 IPv6 adr   |                   |                    |
      |                     |                   |                    |
      |-------------------->|                   |                    |
      | optional: mDNS query|                   |                    |
      | RFC6763/RFC6762     |                   |                    |
      |                     |                   |                    |
      |<--------------------|                   |                    |
      | mDNS broadcast      |                   |                    |
      | response or periodic|                   |                    |
      |                     |                   |                    |
      |<------------------->C<----------------->|                    |
      |            TLS via the Circuit Proxy    |                    |
      |<--Registrar TLS server authentication---|                    |
  [PROVISIONAL accept of server cert]           |                    |
      P---X.509 client authentication---------->|                    |
      P                     |                   |                    |
      P---Request Voucher (include nonce)------>|                    |
      P                     |                   |                    |
      P                     |       /--->       |                    |
      P                     |       |      [accept device?]          |
      P                     |       |      [contact Vendor]          |
      P                     |       |           |--Pledge ID-------->|
      P                     |       |           |--Domain ID-------->|
      P                     |       |           |--optional:nonce--->|
      P                     |       |           |     [extract DomainID]
      P                     |       |           |                    |
      P                     |    optional:      |     [update audit log]
      P                     |       |can        |                    |
      P                     |       |occur      |                    |
      P                     |       |in         |                    |
      P                     |       |advance    |                    |
      P                     |       |           |                    |
      P                     |       |           |<-device audit log--|
      P                     |       |           |<- voucher ---------|
      P                     |       \---->      |                    |
      P                     |                   |                    |
      P                     |       [verify audit log and voucher]   |
      P                     |                   |                    |
      P<------voucher---------------------------|                    |
  [verify voucher ]         |                   |                    |
  [verify provisional cert ]|                   |                    |
      |                     |                   |                    |
      |---------------------------------------->|                    |
      | Continue with RFC7030 enrollment        |                    |
      | using now bidirectionally authenticated |                    |
      | TLS session.        |                   |                    |
      |                     |                   |                    |
      |                     |                   |                    |
      |                     |                   |                    |
        ]]></artwork>

        <postamble>Figure 2</postamble>
      </figure>

      <t></t>

      <section title="Behavior of a Pledge">
        <t>A pledge that has not yet been bootstrapped attempts to find a
        local domain and join it. A pledge MUST NOT automatically initiate
        bootstrapping if it has already been configured or is in the process
        of being configured.</t>

        <t>States of a pledge are as follows:</t>

        <t></t>

        <figure>
          <artwork><![CDATA[
             +--------------+
             |   Start      |
             |              |
             +------+-------+
                    |
             +------v-------+
             |  Discover    |
+------------>              |
|            +------+-------+
|                   |
|            +------v-------+
|            |  Identity    |
^------------+              |
| rejected   +------+-------+
|                   |
|            +------v-------+
|            | Request      |
|            | Join         |
|            +------+-------+
|                   |
|            +------v-------+
|            |  Imprint     |   Optional
^------------+              <--+Manual input
| Bad Vendor +------+-------+
| response          |
|            +------v-------+
|            |  Enroll      |
^------------+              |
| Enroll     +------+-------+
| Failure           |
|            +------v-------+
|            |  Being       |
^------------+  Managed     |
 Factory     +--------------+
 reset

]]></artwork>

          <postamble>Figure 3</postamble>
        </figure>

        <t></t>

        <t>State descriptions for the pledge are as follows:</t>

        <t><list style="numbers">
            <t>Discover a communication channel to a Registrar.</t>

            <t>Identify itself. This is done by presenting an IDevID X.509
            credential to the discovered Registrar (via the Proxy) in a TLS
            handshake. (The Registrar credentials are only provisionally
            accepted at this time).</t>

            <t>Requests to Join the discovered Registrar. A unique nonce is
            included ensuring that any responses can be associated with this
            particular bootstrapping attempt.</t>

            <t>Imprint on the Registrar. This requires verification of the
            vendor service provided "Audit" or "Ownership" Voucher. Either of
            these responses contains sufficient information for the pledge to
            complete authentication of a Registrar. (The pledge can now finish
            authentication of the Registrar TLS server certificate)</t>

            <t>Enroll by accepting the domain specific information from a
            Registrar, and by obtaining a domain certificate from a Registrar
            using a standard enrollment protocol, e.g. Enrollment over Secure
            Transport (EST) <xref target="RFC7030"></xref>.</t>

            <t>The Pledge is now a member of, and can be managed by, the
            domain and will only repeat the discovery aspects of bootstrapping
            if it is returned to factory default settings.</t>
          </list>The following sections describe each of these steps in more
        detail.</t>

        <section anchor="ProxyDiscovery" title="Discovery">
          <t>The result of discovery is a logical communication with a
          Registrar, through a Proxy. The Proxy is transparent to the Pledge
          but is always assumed to exist.</t>

          <t>To discover the Registrar the Pledge performs the following
          actions:</t>

          <t><list style="letters">
              <t>MUST: Obtains a local address using either IPv4 or IPv6
              methods as described in <xref target="RFC4862"></xref> IPv6
              Stateless Address AutoConfiguration or <xref
              target="RFC3927"></xref> Dynamic Configuration of IPv4
              Link-Local Addresses. The Plege MAY obtain an IP address via
              DHCP [RFC2131]. The DHCP provided parameters for the Domain Name
              System can be used to perform step (d) DNS operations if all
              local discovery attempts fail (see below).</t>

              <t>MUST: Performs DNS-based Service Discovery <xref
              target="RFC6763"></xref> over Multicast DNS <xref
              target="RFC6762"></xref> searching for the service
              "_bootstrapks._tcp.local.". To prevent unaccceptable levels of
              network traffic the congestion avoidance mechanisms specified in
              <xref target="RFC6762"></xref> section 7 MUST be followed. The
              Pledge SHOULD listen for an unsolicited broadcast response as
              described in <xref target="RFC6762"></xref>. This allows devices
              to avoid announcing their presence via mDNS broadcasts and
              instead silently join a network by watching for periodic
              unsolicited broadcast responses.</t>

              <t>MAY: Performs DNS-based Service Discovery [RFC6763] over
              normal DNS operations. The service searched for is
              "_bootstrapks._tcp.example.com". In this case the domain
              "example.com" is discovered as described in <xref
              target="RFC6763"></xref> section 11.</t>

              <t>MAY: If no local bootstrapks service is located using the
              DNS-based Service Discovery methods the Pledge contacts a well
              known vendor provided bootstrapping server by performing a DNS
              lookup using a well known URI such as
              "bootstrapks.vendor-example.com". The details of the URI are
              vendor specific. Vendors that leverage this method on the Pledge
              are responsible for providing the bootstrapks service.</t>
            </list>DNS-based service discovery communicates the local proxy
          IPv4 or IPv6 address and port to the Pledge. Once a proxy is
          discovered the Pledge communicates with a Registrar through the
          proxy using the bootstrapping protocol defined in <xref
          target="ProtocolDetails"></xref>. The current DNS services returned
          during each query is maintained until bootstrapping is completed. If
          bootstrapping fails and the Pledge returns to the Discovery state it
          picks up where it left off and continues attempting bootstrapping.
          For example if the first Multicast DNS _bootstrapks._tcp.local
          response doesn't work then the second and third responses are tried.
          If these fail the Pledge moves on to normal DNS-based Service
          Discovery.</t>

          <t>Each discovery method attempted SHOULD exponentially back-off
          attempts (to a maximum of one hour) to avoid overloading the network
          infrastructure with discovery. The back-off timer for each method
          MUST be independent of other methods. Methods SHOULD be run in
          parallel to avoid head of queue problems. Once a connection to a
          Registrar is established (e.g. establishment of a TLS session key)
          there are expectations of more timely responses, see <xref
          target="RequestAuditTokenFromRegistrar"></xref>.</t>

          <t>Once all discovered services are attempted the device SHOULD
          return to Multicast DNS. It should periodically retry the vendor
          specific mechanisms. The Pledge may prioritize selection order as
          appropriate for the anticipated environment.</t>
        </section>

        <section anchor="identity" title="Identity">
          <t>The Pledge identifies itself during the communication protocol
          handshake. If the client identity is rejected the Pledge repeats the
          Discovery process using the next proxy or discovery method
          available.</t>

          <t>The bootstrapping protocol server is not initially authenticated.
          Thus the connection is provisional and all data received is
          untrusted until sufficiently validated even though it is over a TLS
          connection. This is aligned with the existing provisional mode of
          EST [RFC7030] during s4.1.1 "Bootstrap Distribution of CA
          Certificates". See <xref target="AuditTokenResponse"></xref> for
          more information about when the TLS connection authenticated is
          completed.</t>

          <t>All security associations established are between the new device
          and the Bootstrapping server regardless of proxy operations.</t>
        </section>

        <section title="Request Join">
          <t>The Pledge POSTs a request to join the domain to the
          Bootstrapping server. This request contains a Pledge generated nonce
          and informs the Bootstrapping server which imprint methods the
          Pledge will accept.</t>

          <t>As indicated in EST [RFC7030] the bootstrapping server MAY
          redirect the client to an alternate server. This is most useful in
          the case where the Pledge has resorted to a well known vendor URI
          and is communicating with the vendor's Registrar directly. In this
          case the Pledge has authenticated the Registrar using the local
          Implicit Trust Anchor database and can therefore treat the redirect
          URI as a trusted URI which can also be validated using the Implicit
          Trust Anchor database. Since client authentication occurs during the
          TLS handshake the bootstrapping server has sufficient information to
          apply appropriate policy concerning which server to redirect to.</t>

          <t>The nonce ensures the Pledge can verify that responses are
          specific to this bootstrapping attempt. This minimizes the use of
          global time and provides a substantial benefit for devices without a
          valid clock.</t>
        </section>

        <section anchor="AcceptDomain" title="Imprint">
          <t>The Pledge validates the voucher and accepts the Registrar ID.
          The provisional TLS connection is validated using the Registrar ID
          from the voucher.</t>
        </section>

        <section anchor="timeunknown" title="Lack of realtime clock">
          <t>Many devices when bootstrapping do not have knowledge of the
          current time. Mechanisms like Network Time Protocols can not be
          secured until bootstrapping is complete. Therefore bootstrapping is
          defined in a method that does not require knowledge of the current
          time.</t>

          <t>Unfortunately there are moments during bootstrapping when
          certificates are verified, such as during the TLS handshake, where
          validity periods are confirmed. This paradoxical "catch-22" is
          resolved by the Pledge maintaining a concept of the current "window"
          of presumed time validity that is continually refined throughout the
          bootstrapping process as follows:</t>

          <t><list style="symbols">
              <t>Initially the Pledge does not know the current time.</t>

              <t>During Pledge authentiation by the Registrar a realtime clock
              can be used by the Registrar. This bullet expands on a closely
              related issue regarding Pledge lifetimes. RFC5280 indicates that
              long lived Pledge certifiates "SHOULD be assigned the
              GeneralizedTime value of 99991231235959Z" [RFC5280] so the
              Registrar MUST support such lifetimes and SHOULD support
              ignoring Pledge lifetimes if they did not follow the RFC5280
              recommendations.</t>

              <t>Once the Audit Voucher is accepted the validity period of the
              domainCAcert in the voucher (see <xref
              target="AuditTokenResponse"></xref>) now describes a valid time
              window. Any subsequent certificate validity periods checked
              during RFC5280 path validation MUST occur within this
              window.</t>

              <t>When accepting an enrollment certificate the validity period
              within the new certificate is assumed to be valid by the Pledge.
              The Pledge is now willing to use this credential for client
              authentication.</t>
            </list></t>

          <t>Once in this state the Pledge has a valid trust anchor with the
          local domain and has a locally issued credential. These MAY be used
          to secure distribution of more accurate time information although
          specification of such a protocol is out-of-scope of this
          document.</t>

          <t>The nonce included in join attempts provides an alternate
          mechanism for the Pledge to ensure Audit Voucher responses are
          associated with a particular bootstrapping attempt. Nonceless Audit
          Vouchers from the MASA server are always valid and thus time is not
          needed.</t>

          <t>Ownership Vouchers include time information and MUST be validated
          using a realtime clock.</t>
        </section>

        <section title="Enrollment">
          <t>As the final step of bootstrapping a Registrar helps to issue a
          domain specific credential to the Pledge. For simplicity in this
          document, a Registrar primarily facilitates issuing a credential by
          acting as an RFC5280 Registration Authority for the Domain
          Certification Authority.</t>

          <t>Enrollment proceeds as described in <xref
          target="RFC7030"></xref>. Authentication of the EST server is done
          using the Voucher rather than the methods defined in EST.</t>

          <t>Once the Audit or Ownership Voucher is received, as specified in
          this document, the client has sufficient information to leverage the
          existing communication channel with a Registrar to continue an EST
          RFC7030 enrollment. Enrollment picks up at RFC7030 section 4.1.1.
          bootstrapping where the Audit Voucher provides the "out-of-band" CA
          certificate fingerprint (in this case the full CA certificate) such
          that the client can now complete the TLS server authentication. At
          this point the client continues with EST enrollment operations
          including "CA Certificates Request", "CSR Attributes" and "Client
          Certificate Request" or "Server-Side Key Generation".</t>
        </section>

        <section title="Being Managed">
          <t>Functionality to provide generic "configuration" information is
          supported. The parsing of this data and any subsequent use of the
          data, for example communications with a Network Management System is
          out of scope but is expected to occur after bootstrapping enrollment
          is complete. This ensures that all communications with management
          systems which can divulge local security information (e.g. network
          topology or raw key material) is secured using the local credentials
          issued during enrollment.</t>

          <t>The Pledge uses bootstrapping to join only one domain. Management
          by multiple domains is out-of-scope of bootstrapping. After the
          device has successfully joined a domain and is being managed it is
          plausible that the domain can insert credentials for other domains
          depending on the device capabilities.</t>

          <t>See <xref target="PostEnrollment"></xref>.</t>
        </section>
      </section>

      <section anchor="proxybehaviour" title="Behavior of a Proxy">
        <t>The role of the Proxy is to facilitate communications. The Proxy
        forwards packets between the Pledge and a Registrar that has been
        configured on the Proxy. The Proxy does not terminate the TLS
        handshake. A Proxy is always assumed even if directly integrated into
        a Registrar.</t>

        <t>As a result of the Proxy Discovery process in section <xref
        target="ProxyDiscovery"></xref>, the port number exposed by the proxy
        does not need to be well known, or require an IANA allocation.</t>

        <t>If the Proxy joins an Autonomic Control Plane (<xref
        target="I-D.ietf-anima-autonomic-control-plane"></xref>) it SHOULD use
        Autonomic Control Plane secured GRASP (<xref
        target="I-D.ietf-anima-grasp"></xref>) to discovery the Registrar
        address and port. For the IPIP encapsulation methods, the port
        announced by the Proxy MUST be the same as on the registrar in order
        for the proxy to remain stateless.</t>

        <t>In order to permit the proxy functionality to be implemented on the
        maximum variety of devices the chosen mechanism SHOULD use the minimum
        amount of state on the proxy device. While many devices in the ANIMA
        target space will be rather large routers, the proxy function is
        likely to be implemented in the control plane CPU such a device, with
        available capabilities for the proxy function similar to many class 2
        IoT devices.</t>

        <t>The document <xref
        target="I-D.richardson-anima-state-for-joinrouter"></xref> provides a
        more extensive analysis of the alternative proxy methods.</t>

        <section anchor="coapconnection" title="CoAP connection to Registrar">
          <t>The proxy MUST implement an IPIP (protocol 41) encapsulation
          function for CoAP traffic to the configured UDP port on the
          registrar. The proxy does not terminate the CoAP DTLS connection.
          [[EDNOTE: The choice of CoAP as the mandatory to implement protocol
          rather than HTTP maximizes code reuse on the smallest of devices.
          Unfortunately this means this document will have to include the EST
          over CoAP details as additional sections. The alternative is to make
          'HTTPS proxy' method the mandatory to implement and provide a less
          friendly environment for the smallest of devices. This is a decision
          we'll have to see addressed by the broader team.]]</t>

          <t>The IPIP encapsulation allows the proxy to forward traffic which
          is otherwise not to be forwarded, as the traffic between New Node
          and Proxy use IPv6 Link Local addresses.</t>

          <t>If the Proxy device has more than one interface on which it
          offers the proxy function, then it must select a unique (ACP) IP
          address per interface in order so that the proxy can stateless
          return the (link-local) reply packets to the correct link.</t>
        </section>

        <section title="HTTPS proxy connection to Registrar">
          <t>The proxy SHOULD also provide one of: an IPIP encapsulation of
          HTTP traffic on TCP port TBD to the registrar, or a TCP circuit
          proxy that connects the Pledge to a Registrar.</t>

          <t>When the Proxy provides a circuit proxy to a Registrar the
          Registrar MUST accept HTTPS connections.</t>

          <t>When the Proxy provides a stateless IPIP encapsulation to a
          Registrar, then the Registrar will have to perform IPIP
          decapsulation, remembering the originating outer IPIP source address
          in order to qualify the inner link-local address. This is a kind of
          encapsulation and processing which is similar in many ways to how
          mobile IP works.</t>

          <t>Being able to connect a TCP (HTTP) or UDP (CoAP) socket to a
          link-local address with an encapsulated IPIP header requires API
          extensions beyond <xref target="RFC3542"></xref> for UDP use, and
          requires a form of connection latching (see section 4.1 of <xref
          target="RFC5386"></xref> and all of <xref target="RFC5660"></xref>,
          except that a simple IPIP tunnel is used rather than an IPsec
          tunnel).</t>
        </section>
      </section>

      <section title="Behavior of the Registrar">
        <t>A Registrar listens for Pledges and determines if they can join the
        domain. A Registrar obtains a Voucher from the MASA service and
        delivers them to the Pledge as well as facilitating enrollment with
        the domain PKI.</t>

        <t>A Registrar is typically configured manually. If the Registrar
        joins an Autonomic Control Plane (<xref
        target="I-D.ietf-anima-autonomic-control-plane"></xref>) it MUST use
        Autonomic Control Plane secured GRASP (<xref
        target="I-D.ietf-anima-grasp"></xref>) to broadcast the Registrar's
        address and port to potential Proxies.</t>

        <t>Registrar behavior is as follows:</t>

        <t></t>

        <figure>
          <artwork><![CDATA[Contacted by Pledge
        +
        |
+-------v----------+
| Entity           | fail?
| Authentication   +---------+
+-------+----------+         |
        |                    |
+-------v----------+         |
| Entity           | fail?   |
| Authorization    +--------->
+-------+----------+         |
        |                    |
+-------v----------+         |
| Claiming the     | fail?   |
| Entity           +--------->
+-------+----------+         |
        |                    |
+-------v----------+         |
| Log Verification | fail?   |
|                  +--------->
+-------+----------+         |
        |                    |
+-------v----------+    +----v-------+
| Forward          |    |            |
| Audit            |    | Reject     |
| voucher + config |    | Device     |
| to the Entity    |    |            |
+------------------+    +------------+]]></artwork>

          <postamble>Figure 4</postamble>
        </figure>

        <section anchor="entityauthentication" title="Pledge Authentication">
          <t>The applicable authentication methods detailed in EST [RFC7030]
          are:</t>

          <t><list style="symbols">
              <t>the use of an IDevID X.509 credential during the TLS client
              authentication,</t>

              <t>or the use of a secret that is transmitted out of band
              between the Pledge and a Registrar (this use case is not
              autonomic).</t>
            </list>In order to validate the IDevID X.509 credential a
          Registrar maintains a database of vendor trust anchors (e.g. vendor
          root certificates or keyIdentifiers for vendor root public keys).
          For user interface purposes this database can be mapped to
          colloquial vendor names. Registrars can be shipped with the trust
          anchors of a significant number of third-party vendors within the
          target market.</t>
        </section>

        <section anchor="AcceptingTheEntity" title="Pledge Authorization">
          <t>In a fully automated network all devices must be securely
          identified and authorized to join the domain.</t>

          <t>A Registrar accepts or declines a request to join the domain,
          based on the authenticated identity presented. Automated acceptance
          criteria include:</t>

          <t><list style="symbols">
              <t>allow any device of a specific type (as determined by the
              X.509 IDevID),</t>

              <t>allow any device from a specific vendor (as determined by the
              X.509 IDevID),</t>

              <t>allow a specific device from a vendor (as determined by the
              X.509 IDevID) against a domain white list. (The mechanism for
              checking a shared white list potentiatlly used by multiple
              Registrars is out of scope).</t>
            </list></t>

          <t>To look the Pledge up in a domain white list a consistent method
          for extracting device identity from the X.509 certificate is
          required. RFC6125 describes Domain-Based Application Service
          identity but here we require Vendor Device-Based identity. The
          subject field's DN encoding MUST include the "serialNumber"
          attribute with the device's unique serial number. In the language of
          RFC6125 this provides for a SERIALNUM-ID category of identifier that
          can be included in a certificate and therefore that can also be used
          for matching purposes. The SERIALNUM-ID whitelist is collated
          according to vendor trust anchor since serial numbers are not
          globally unique.</t>

          <t>Since all Pledges accept Audit Vouchers a Registrar MUST use the
          vendor provided MASA service to verify that the device's history log
          does not include unexpected Registrars. If a device had previously
          registered with another domain, a Registrar of that domain would
          show in the log.</t>

          <t>If a Pledge is accepted into the domain, it is expected to
          request a domain certificate through a certificate enrollment
          process. The result is a common trust anchor and device certificates
          for all autonomic devices in a domain (these certificates can be
          used for other methods, for example boundary detection,
          auto-securing protocols, etc.). The authorization performed during
          this phase is used for EST enrollment requests.</t>
        </section>

        <section title="Claiming the New Entity">
          <t>Claiming an entity establishes an audit log at the MASA server
          and provides a Registrar with proof, in the form of a MASA Audit
          Voucher, that the log entry has been inserted. As indicated in <xref
          target="AcceptDomain"></xref> a Pledge will only proceed with
          bootstrapping if a validated MASA Audit Voucher has been received.
          The Pledge therefore enforces that bootstrapping only occurs if the
          claim has been logged. There is no requirement for the vendor to
          definitively know that the device is owned by the Registrar.</t>

          <t>Registrar's obtain the Vendor URI via static configuration or by
          extracting it from the X.509 IDevID credential. The imprint method
          supported by the Pledge is known from the X.509 IDevID credential.
          [[EDNOTE: An appropriate extension for indicating the Vendor URI and
          imprint method could be defined using the methods described in <xref
          target="I-D.lear-mud-framework"></xref>]].</t>

          <t>During initial bootstrapping the Pledge provides a nonce specific
          to the particular bootstrapping attempt. The Registrar SHOULD
          include this nonce when claiming the Pledge from the MASA service.
          Claims from an unauthenticated Registrar are only serviced by the
          MASA resource if a nonce is provided.</t>

          <t>The Registrar can claim a Pledge that is not online by forming
          the request using the entities unique identifier and not including a
          nonce in the claim request. Audit Voucher obtained in this way do
          not have a lifetime and they provide a permanent method for the
          domain to claim the device. Evidence of such a claim is provided in
          the audit log entries available to any future Registrar. Such claims
          reduce the ability for future domains to secure bootstrapping and
          therefore the Registrar MUST be authenticated by the MASA service
          although no requirement is implied that the MASA associates this
          authentication with ownership.</t>

          <t>An Ownership Voucher requires the vendor to definitively know
          that a device is owned by a specific domain. The method used to
          "claim" this are out-of-scope. A MASA ignores or reports failures
          when an attempt is made to claim a device that has a an Ownership
          Voucher.</t>
        </section>

        <section title="Log Verification">
          <t>A Registrar requests the log information for the Pledge from the
          MASA service. The log is verified to confirm that the following is
          true to the satisfaction of a Registrar's configured policy:</t>

          <t><list style="symbols">
              <t>Any nonceless entries in the log are associated with
              domainIDs recognized by the registrar.</t>

              <t>Any nonce'd entries are older than when the domain is known
              to have physical possession of the Pledge or that the domainIDs
              are recognized by the registrar.</t>
            </list>If any of these criteria are unacceptable to a Registrar
          the entity is rejected. A Registrar MAY be configured to ignore the
          history of the device but it is RECOMMENDED that this only be
          configured if hardware assisted NEA [RFC5209] is supported.</t>

          <t>This document specifies a simple log format as provided by the
          MASA service to the registar. This format could be improved by
          distributed consensus technologies that integrate the Audit Voucher
          with a current technologies such as block-chain or hash trees or the
          like. Doing so is out of the scope of this document but are
          anticipated improvements for future work.</t>
        </section>
      </section>

      <section title="Behavior of the MASA Service">
        <t>The MASA service is provided by the Factory provider on the global
        Internet. The URI of this service is well known. The URI SHOULD also
        be provided as an X.509 IDevID extension (a "MASA Audit Voucher
        Distribution Point" extension).</t>

        <t>The MASA service provides the following functionalities to
        Registrars:</t>

        <section title="Issue Audit Voucher and Log the event">
          <t>A Registrar POSTs a claim message optionally containing the
          bootstrap nonce to the MASA server.</t>

          <t>If a nonce is provided the MASA service responds to all requests.
          The MASA service verifies the Registrar is representative of the
          domain and generates a privacy protected log entry before responding
          with the Audit Voucher. For the simple log format defined in this
          document using the DomainID is considered sufficient privacy. Future
          work to improve the logging mechanism could include additional
          privacy protections.</t>

          <t>If a nonce is not provided then the MASA service MUST
          authenticate the Registrar as a valid customer. This prevents denial
          of service attacks.</t>
        </section>

        <section title="Retrieve Audit Entries from Log">
          <t>When determining if a Pledge should be accepted into a domain the
          Registrar retrieves a copy of the audit log from the MASA service.
          This contains a list of privacy protected domain identities that
          have previously claimed the device. Included in the list is an
          indication of the time the entry was made and if the nonce was
          included.</t>
        </section>
      </section>

      <section anchor="PostEnrollment"
               title="Leveraging the new key infrastructure / next steps">
        <t>As the devices have a common trust anchor, device identity can be
        securely established, making it possible to automatically deploy
        services across the domain in a secure manner.</t>

        <t>Examples of services:<list style="symbols">
            <t>Device management.</t>

            <t>Routing authentication.</t>

            <t>Service discovery.</t>
          </list></t>

        <section anchor="boundary" title="Network boundaries">
          <t>When a device has joined the domain, it can validate the domain
          membership of other devices. This makes it possible to create trust
          boundaries where domain members have higher level of trusted than
          external devices. Using the autonomic User Interface, specific
          devices can be grouped into to sub domains and specific trust levels
          can be implemented between those.</t>
        </section>
      </section>

      <section title="Interactions with Network Access Control">
        <t>The assumption is that Network Access Control (NAC) completes using
        the Pledge 's X.509 IDevID credentials and results in the device
        having sufficient connectivity to discovery and communicate with the
        proxy. Any additional connectivity or quarantine behavior by the NAC
        infrastructure is out-of-scope. After the devices has completed
        bootstrapping the mechanism to trigger NAC to re-authenticate the
        device and provide updated network privileges is also
        out-of-scope.</t>

        <t>This achieves the goal of a bootstrap architecture that can
        integrate with NAC but does not require NAC within the network where
        it wasn't previously required. Future optimizations can be achieved by
        integrating the bootstrapping protocol directly into an initial EAP
        exchange.</t>
      </section>
    </section>

    <section title="Domain Operator Activities">
      <t>This section describes how an operator interacts with a domain that
      supports the bootstrapping as described in this document.</t>

      <section title="Instantiating the Domain Certification Authority">
        <t>This is a one time step by the domain administrator. This is an
        "off the shelf" CA with the exception that it is designed to work as
        an integrated part of the security solution. This precludes the use of
        3rd party certification authority services that do not provide support
        for delegation of certificate issuance decisions to a domain managed
        Registration Authority.</t>
      </section>

      <section title="Instantiating the Registrar">
        <t>This is a one time step by the domain administrator. One or more
        devices in the domain are configured take on a Registrar function.</t>

        <t>A device can be configured to act as a Registrar or a device can
        auto-select itself to take on this function, using a detection
        mechanism to resolve potential conflicts and setup communication with
        the Domain Certification Authority. Automated Registrar selection is
        outside scope for this document.</t>
      </section>

      <section anchor="accepting" title="Accepting New Entities">
        <t>For each Pledge the Registrar is informed of the unique identifier
        (e.g. serial number) along with the manufacturer's identifying
        information (e.g. manufacturer root certificate). This can happen in
        different ways:</t>

        <t><list style="numbers">
            <t>Default acceptance: In the simplest case, the new device
            asserts its unique identity to a Registrar. The registrar accepts
            all devices without authorization checks. This mode does not
            provide security against intruders and is not recommended.</t>

            <t>Per device acceptance: The new device asserts its unique
            identity to a Registrar. A non-technical human validates the
            identity, for example by comparing the identity displayed by the
            registrar (for example using a smartphone app) with the identity
            shown on the packaging of the device. Acceptance may be triggered
            by a click on a smartphone app "accept this device", or by other
            forms of pairing. See also <xref
            target="I-D.behringer-homenet-trust-bootstrap"></xref> for how the
            approach could work in a homenet.</t>

            <t>Whitelist acceptance: In larger networks, neither of the
            previous approaches is acceptable. Default acceptance is not
            secure, and a manual per device methods do not scale. Here, the
            registrar is provided a priori with a list of identifiers of
            devices that belong to the network. This list can be extracted
            from an inventory database, or sales records. If a device is
            detected that is not on the list of known devices, it can still be
            manually accepted using the per device acceptance methods.</t>

            <t>Automated Whitelist: an automated process that builds the
            necessary whitelists and inserts them into the larger network
            domain infrastructure is plausible. Once set up, no human
            intervention is required in this process. Defining the exact
            mechanisms for this is out of scope although the registrar
            authorization checks is identified as the logical integration
            point of any future work in this area.</t>
          </list></t>

        <t>None of these approaches require the network to have permanent
        Internet connectivity. Even when the Internet based MASA service is
        used, it is possible to pre-fetch the required information from the
        MASA a priori, for example at time of purchase such that devices can
        enroll later. This supports use cases where the domain network may be
        entirely isolated during device deployment.</t>

        <t>Additional policy can be stored for future authorization decisions.
        For example an expected deployment time window or that a certain Proxy
        must be used.</t>
      </section>

      <section title="Automatic Enrollment of Devices">
        <t>The approach outlined in this document provides a secure zero-touch
        method to enroll new devices without any pre-staged configuration. New
        devices communicate with already enrolled devices of the domain, which
        proxy between the new device and a Registrar. As a result of this
        completely automatic operation, all devices obtain a domain based
        certificate.</t>
      </section>

      <section title="Secure Network Operations">
        <t>The certificate installed in the previous step can be used for all
        subsequent operations. For example, to determine the boundaries of the
        domain: If a neighbor has a certificate from the same trust anchor it
        can be assumed "inside" the same organization; if not, as outside. See
        also <xref target="boundary"></xref>. The certificate can also be used
        to securely establish a connection between devices and central control
        functions. Also autonomic transactions can use the domain certificates
        to authenticate and/or encrypt direct interactions between devices.
        The usage of the domain certificates is outside scope for this
        document.</t>
      </section>
    </section>

    <section anchor="ProtocolDetails" title="Protocol Details">
      <t>A bootstrapping protocol could be implemented as an independent
      protocol from EST, but for simplicity and to reduce the number of TLS
      connections and crypto operations required on the Pledge, it is
      described specifically as extensions to EST. These extensions MUST be
      supported by the Registrar EST server within the same .well-known URI
      tree as the existing EST URIs as described in [RFC7030] section
      3.2.2.</t>

      <t>The Pledge establishes a TLS connection with the Registrar through
      the circuit proxy (see <xref target="proxybehaviour"></xref>) but the
      TLS connection is with the Registar; so for this section the "Pledge" is
      the TLS client and the "Registrar" is the TLS server.</t>

      <t>Establishment of the TLS connection for bootstrapping is as specified
      for EST [RFC7030]. In particular server identity and client identity are
      as described in EST [RFC7030] section 3.3. In EST [RFC7030] provisional
      server authentication for bootstrapping is described in section 4.1.1
      wherein EST clients can "engage a human user to authorize the CA
      certificate using out-of-band data such as a CA certificate" or wherein
      a human user configures the URI of the EST server for Implicit TA based
      authentication. As described in this document, <xref
      target="CompletingAuthenticationBootstrapping"></xref>, a new method of
      bootstrapping now provides a completely automating method of
      bootstrapping PKI.</t>

      <t>The extensions for the Pledge client are as follows:</t>

      <t><list style="symbols">
          <t>The Pledge provisionally accept the EST server certificate during
          the TLS handshake as detailed in <xref
          target="CompletingAuthenticationBootstrapping"></xref>.</t>

          <t>The Pledge requests and validates the Audit Voucher as described
          below. At this point the Pledge has sufficient information to
          validate domain credentials.</t>

          <t>The Pledge calls the EST defined /cacerts method to obtain the
          current CA certificate. These are validated using the Audit
          Voucher.</t>

          <t>The Pledge completes bootstrapping as detailed in EST section
          4.1.1.</t>
        </list></t>

      <t>In order to obtain a validated Audit Voucher and Audit Log a
      Registrar contacts the MASA service Service using REST calls:</t>

      <figure>
        <artwork><![CDATA[           +-----------+ +----------+ +-----------+ +----------+
           | New       | | Circuit  | |           | |          |
           | Entity    | | Proxy    | | Registrar | | Vendor   |
           |           | |          | |           | |          |
           ++----------+ +--+-------+ +-----+-----+ +--------+-+
            |               |               |                |
            |               |               |                |
            |   TLS hello   |  TLS hello    |                |
Establish   +---------------C--------------->                |
TLS         |               |               |                |
connection  |               | Server Cert   |                |
            <---------------C---------------+                |
            | Client Cert   |               |                |
            +---------------C--------------->                |
            |               |               |                |
HTTP REST   | POST /requestvoucher          |                |
Data        +--------------------nonce------>                |
            |               .               | /requestvoucher|
            |               .               +---------------->
            |                               <----------------+
            |                               | /requestlog    |
            |                               +---------------->
            |            voucher            <----------------+
            <-------------------------------+                |
            | (optional config information) |                |
            |               .               |                |
            |               .               |                |]]></artwork>

        <postamble>Figure 5</postamble>
      </figure>

      <t>In some use cases the Registrar may need to contact the Vendor in
      advanced, for example when the target network is air-gapped. The
      nonceless request format is provided for this and the resulting flow is
      slightly different. The security differences associated with not knowing
      the nonce are discussed below:</t>

      <figure>
        <artwork><![CDATA[           +-----------+ +----------+ +-----------+ +----------+
           | New       | | Circuit  | |           | |          |
           | Entity    | | Proxy    | | Registrar | | Vendor   |
           |           | |          | |           | |          |
           ++----------+ +--+-------+ +-----+-----+ +--------+-+
            |               |               |                |
            |               |               |                |
            |               |               | /requestvoucher|
            |               |  (nonce       +---------------->
            |               |  unknown)     <----------------+
            |               |               | /requestlog    |
            |               |               +---------------->
            |               |               <----------------+
            |   TLS hello   |  TLS hello    |                |
Establish   +---------------C--------------->                |
TLS         |               |               |                |
connection  |               | Server Cert   |                |
            <---------------C---------------+                |
            | Client Cert   |               |                |
            |               |               |                |
HTTP REST   | POST /requestvoucher          |                |
Data        +----------------------nonce---->   (discard     |
            |            voucher            |   nonce)       |
            <-------------------------------+                |
            | (optional config information) |                |
            |               .               |                |
            |               .               |                |]]></artwork>

        <postamble>Figure 6</postamble>
      </figure>

      <t></t>

      <t>The extensions for a Registrar server are as follows:</t>

      <t><list style="symbols">
          <t>The Registrar requests and validates the Audit Voucher from the
          vendor authorized MASA service.</t>

          <t>The Registrar forwards the Audit Voucher to the Pledge when
          requested.</t>

          <t>The Registar performs log verifications in addition to local
          authorization checks before accepting the Pledge device.</t>
        </list></t>

      <section anchor="RequestAuditTokenFromRegistrar"
               title="Request Voucher from the Registrar">
        <t>When the Pledge bootstraps it makes a request for a Voucher from a
        Registrar.</t>

        <t>This is done with an HTTPS POST using the operation path value of
        "/requestvoucher".</t>

        <t>The request format is JSON object containing a 64bit nonce
        generated by the client for each request. This nonce MUST be a
        cryptographically strong random or pseudo-random number that can not
        be easily predicted. The nonce MUST NOT be reused for multiple
        attempts to join a network domain. The nonce assures the Pledge that
        the Audit Voucher response is associated with this bootstrapping
        attempt and is not a replay.</t>

        <t>Request media type: application/auditnonce</t>

        <t>Request format: a JSON file with the following:</t>

        <figure>
          <artwork><![CDATA[{
 "version":"1",
 "nonce":"<64bit nonce value>",
}]]></artwork>
        </figure>

        <t></t>

        <t>[[EDNOTE: Even if the nonce was signed it would provide no defense
        against rogue registrars; although it would assure the MASA that a
        certified Pledge exists. To protect against rogue registrars a nonce
        component generated by the MASA (a new round trip) would be required).
        Instead this is addressed by requiring MASA &amp; Registrar
        authentications but it is worth exploring additional protections. This
        to be explored more at IETF96.]]</t>

        <t>The Registrar validates the client identity as described in EST
        [RFC7030] section 3.3.2. The registrar performs authorization as
        detailed in Section 3.3.2. If authorization is successful the
        Registrar obtains an Voucher from the MASA service (see Section
        5.2).</t>

        <t>The received Voucher is forwarded to the Pledge.</t>

        <t>As indicated in EST [RFC7030] the bootstrapping server can redirect
        the client to an alternate server. If the Pledge authenticated a
        Registrar using the well known URI method then the Pledge MUST follow
        the redirect automatically and authenticate the new Registrar against
        the redirect URI provided. If the Pledge had not yet authenticated a
        Registrar because it was discovered and was not a known-to-be-valid
        URI then the new Registrar must be authenticated using one of the two
        autonomic methods described in this document. Similarly the Registar
        MAY respond with an HTTP 202 ("the request has been accepted for
        processing, but the processing has not been completed") as described
        in EST [RFC7030] section 4.2.3.</t>

        <t>Recall that during this communication with the Registar the TLS
        authentication is only provisional. The Pledge client MUST handle all
        data from the Registrar with upmost care. In particular the Pledge
        MUST only allow a single redirection and MUST only support a delay of
        five seconds before declaring the Registrar a failure and moving on to
        the next discovered Registrar. As detailed in <xref
        target="ProxyDiscovery"></xref> if no suitable Registrar is found the
        Pledge restarts the state machine and tries again. So a Registrar that
        is unable to complete the transaction the first time will have future
        chances.</t>
      </section>

      <section anchor="RequestAuditToken" title="Request Voucher from MASA">
        <t>A Registrar requests a Voucher from the MASA service using a REST
        interface. For simplicity this is defined as an optional EST message
        between a Registrar and an EST server running on the MASA service
        although the Registrar is not required to make use of any other EST
        functionality when communicating with the MASA service. (The MASA
        service MUST properly reject any EST functionality requests it does
        not wish to service; a requirement that holds for any REST
        interface).</t>

        <t>This is done with an HTTP POST using the operation path value of
        "/requestvoucher".</t>

        <t>The request format is a JSON object optionally containing the nonce
        value (as obtained from the bootstrap request) and the X.509 IDevID
        extracted serial number (the full certificate is not needed and no
        proof-of-possession information for the device identity is included).
        The AuthorityKeyIdentifier value from the certificate is included to
        ensure a statistically unique identity. The Pledge's serial number is
        extracted from the X.509 IDevID subject name id-at-serialNumber or it
        is the base64 encoded RFC4108 hardwareModuleName hwSerialNum:</t>

        <figure>
          <artwork><![CDATA[{
 "version":"1",
 "nonce":"<64bit nonce value>",
 "IDevIDAuthorityKeyIdentifier":"<base64 encoded keyIdentifier">,
 "DevIDSerialNumber":"<id-at-serialNumber or base64 encoded
                       hardwareModuleName hwSerialNum>",
}]]></artwork>
        </figure>

        <t></t>

        <t>A Registrar MAY exclude the nonce from the request. Doing so allows
        the Registrar to request a Voucher when the Pledge is not online, or
        when the target bootstrapping environment is not on the same network
        as the MASA server (this requires the Registrar to learn the
        appropriate DevIDSerialNumber field from the physical device labeling
        or from the sales channel -- how this occurs is out-of-scope of this
        document). If a nonce is not provided the MASA server MUST
        authenticate the client as described in EST [RFC7030] section 3.3.2 to
        reduce the risk of DDoS attacks. A Registrar performs authorization as
        detailed in <xref target="AcceptingTheEntity"></xref>. If
        authorization is successful the Registrar obtains an Voucher from the
        MASA service (see <xref target="RequestAuditToken"></xref>).</t>

        <t>The JSON message information is encapsulated in a <xref
        target="RFC5652"></xref> Signed-data that is signed by the Registrar.
        The entire certificate chain, up to and including the Domain CA, MUST
        be included in the CertificateSet structure. The MASA service checks
        the internal consistency of the CMS but does not authenticate the
        domain identity information. The domain is not know to the MASA server
        in advance and a shared trust anchor is not implied. The MASA server
        MUST verify that the CMS is signed by a Registrar certificate (by
        checking for the cmc-idRA field) that was issued by a the root
        certificate included in the CMS. This ensures that the Registrar
        making the claim is an authorized Registrar of the unauthenticated
        domain. The EST style client authentication (TLS and HTTP) is used to
        provide a DDoS prevention strategy.</t>

        <t>The root certificate is extracted and used to populate the Audit
        Voucher. The domain ID (e.g. hash of the public key of the domain) is
        extracted from the root certificate and is used to update the audit
        log.</t>
      </section>

      <section anchor="AuditTokenResponse" title="Audit Voucher Response">
        <t>The voucher response to requests from the device and requests from
        a Registrar are in the same format. A Registrar either caches prior
        MASA responses or dynamically requests a new Voucher based on local
        policy.</t>

        <t>If the the join operation is successful, the server response MUST
        contain an HTTP 200 response code with a content-type of
        "application/authorizationvoucher". The server MUST answer with a
        suitable 4xx or 5xx HTTP [RFC2616] error code when a problem occurs.
        The response data from the MASA server MUST be a plaintext
        human-readable error message containing explanatory information
        describing why the request was rejected.</t>

        <t>The Audit Voucher consists of the nonce, if supplied, the serial
        number information identifying the device and the domain CA
        certificate extracted from the request:</t>

        <figure>
          <artwork><![CDATA[{
 "version":"1",
 "nonce":"<64bit nonce value>",
 "IDevIDAuthorityKeyIdentifier":"<base64 encoded keyIdentifier>",
 "DevIDSerialNumber":"<id-at-serialNumber>",
 "domainCAcert":"<the base64 encoded domain CA's certificate>"
}]]></artwork>
        </figure>

        <t>The Audit Voucher response is encapsulated in a <xref
        target="RFC5652"></xref> Signed-data that is signed by the MASA
        server. The Pledge verifies this signed message using the manufacturer
        installed trust anchor assocaited with the X.509 IDevID. [[EDNOTE: As
        detailed in netconf-zerotouch this might be a distinct trust anchor
        rather than re-using the trust anchor for the IDevID. This concept
        will need to be detailed in this document as well.]]</t>

        <t>[[EDNOTE: Using CMS is consistent with the alignment of this
        bootstrapping document with EST, a PKIX enrollment protocol that
        includes Certificate Management over CMS. An alternative format would
        be the RFC7515 JSON Web Signature (JWS), which would allow clients
        that do not use fullCMC messages to avoid CMS entirely. Use of JWS
        would likely include a discussion of CBOR in order ensure the base64
        expansions of the certs and signatures within the JWS message are of
        minimal size -- it is not yet clear to this author how that would work
        out]]</t>

        <t>The 'domainCAcert' element of this message contains the domain CA's
        public key. This is specific to bootstrapping a public key
        infrastructure. To support bootstrapping other key infrastructures
        additional domain identity types might be defined in the future.
        Clients MUST be prepared to ignore additional fields they do not
        recognize. Clients MUST be prepared to parse and fail gracefully from
        an Audit Voucher response that does not contain a 'domainCAcert' field
        at all.</t>

        <t>To minimize the size of the Audit Voucher response message the
        domainCAcert is not a complete distribution of the EST section 4.1.3
        CA Certificate Response.</t>

        <t>The Pledge installs the domainCAcert trust anchor. As indicated in
        <xref target="identity"></xref> the newly installed trust anchor is
        used as an EST RFC7030 Explicit Trust Anchor. The Pledge MUST use the
        domainCAcert trust anchor to immediately validate the currently
        provisional TLS connection to a Registrar.</t>

        <section anchor="CompletingAuthenticationBootstrapping"
                 title="Completing authentication of Provisional TLS connection">
          <t>If a Registrar's credential can not be verified using the
          domainCAcert trust anchor the TLS connection is immediately
          discarded and the Pledge abandons attempts to bootstrap with this
          discovered registrar.</t>

          <t>The following behaviors on a Registrar and Pledge are in addition
          to normal PKIX operations:</t>

          <t><list style="symbols">
              <t>The EST server MUST use a certificate that chains to the
              domainCAcert. This means that when the EST server obtains
              renewed credentials the credentials included in the <xref
              target="RequestAuditToken"></xref> request match the chain used
              in the current provisional TLS connection.</t>

              <t>The Pledge PKIX path validation of a Registrar validity
              period information is as described in <xref
              target="timeunknown"></xref>.</t>
            </list>Because the domainCAcert trust anchor is installed as an
          Explicit Trust Anchor it can be used to authenticate any dynamically
          discovered EST server that contain the id-kp-cmcRA extended key
          usage extension as detailed in EST RFC7030 section 3.6.1; but to
          reduce system complexity the Pledge SHOULD avoid additional
          discovery operations. Instead the Pledge SHOULD communicate directly
          with the Registrar as the EST server to complete PKI local
          certificate enrollment. Additionally the Pledge SHOULD use the
          existing TLS connection to proceed with EST enrollment, thus
          reducing the total amount of cryptographic and round trip operations
          required during bootstrapping. [[EDNOTE: It is reasonable to mandate
          that the existing TLS connection be re-used? e.g. MUST &gt;&gt;
          SHOULD?]]</t>
        </section>
      </section>

      <section title="Voucher Status Telemetry ">
        <t>For automated bootstrapping of devices the adminstrative elements
        providing bootstrapping also provide indications to the system
        administrators concerning device lifecycle status. To facilitate this
        those elements need telemetry information concerning the device's
        status.</t>

        <t>To indicate Pledge status regarding the Audit Voucher the client
        SHOULD post a status message.</t>

        <t>The client HTTP POSTs the following to the server at the EST well
        known URI /voucher_status. The Status field indicates if the Voucher
        was acceptable. If it was not acceptable the Reason string indicates
        why. In the failure case this message is being sent to an
        unauthenticated, potentially malicious Registrar and therefore the
        Reason string SHOULD NOT provide information beneficial to an
        attacker. The operational benefit of this telemetry information is
        balanced against the operational costs of not recording that an
        Voucher was ignored by a client the registar expected to continue
        joining the domain.</t>

        <t><figure>
            <artwork><![CDATA[{
  "version":"1",
  "Status":FALSE /* TRUE=Success, FALSE=Fail"
  "Reason":"Informative human readable message"
}]]></artwork>
          </figure>The server SHOULD respond with an HTTP 200 but MAY simply
        fail with an HTTP 404 error. The client ignores any response. Within
        the server logs the server SHOULD capture this telemetry
        information.</t>
      </section>

      <section title="MASA authorization log Request ">
        <t>A registrar requests the MASA authorization log from the MASA
        service using this EST extension.</t>

        <t>This is done with an HTTP GET using the operation path value of
        "/requestauditlog".</t>

        <t>The client HTTP POSTs the same Voucher Request as for requesting an
        audit token but now posts it to the /requestauditlog URI instead. The
        IDevIDAuthorityKeyIdentifier and DevIDSerialNumber informs the MASA
        server which log is requested so the appropriate log can be prepared
        for the response.</t>
      </section>

      <section title="MASA authorization log Response">
        <t>A log data file is returned consisting of all log entries. For
        example:</t>

        <t><figure>
            <artwork><![CDATA[{
  "version":"1",
  "events":[
    {
     "date":"<date/time of the entry>",
     "domainID":"<domainID as extracted from the domain CA certificate
                  within the CMS of the audit voucher request>",
     "nonce":"<any nonce if supplied (or the exact string 'NULL')>"
    },
    {
     "date":"<date/time of the entry>",
     "domainID":"<domainID as extracted from the domain CA certificate
                  within the CMS of the audit voucher request>",
     "nonce":"<any nonce if supplied (or the exact string 'NULL')>"
    }
  ]
}]]></artwork>
          </figure></t>

        <t>Distribution of a large log is less than ideal. This structure can
        be optimized as follows: All nonce-less entries for the same domainID
        MAY be condensed into the single most recent nonceless entry.</t>

        <t>A Registrar uses this log information to make an informed decision
        regarding the continued bootstrapping of the Pledge. For example if
        the log includes unexpected domainIDs this is indicative of
        problematic imprints by the Pledge. If the log includes nonce-less
        entries this is indicative of the permanent ability for the indicated
        domain to trigger a reset of the device and take over management of
        it. Equipment that is purchased pre-owned can be expected to have an
        extensive history.</t>

        <t>Log entries containing the Domain's ID can be compared against
        local history logs in search of discrepancies.</t>
      </section>

      <section title="EST Integration for PKI bootstrapping">
        <t>The prior sections describe EST extensions necessary to enable
        fully automated bootstrapping. Although the Audit Voucher
        request/response structure members IDevIDAuthorityKeyIdentifier and
        DevIDSerialNumber are specific to PKI bootstrapping these are the only
        PKI specific aspects of the extensions and future work might replace
        them with non-PKI structures.</t>

        <t>The prior sections provide functionality for the Pledge to obtain a
        trust anchor representative of the Domain. The following section
        describe using EST to obtain a locally issued PKI certificate. The
        Pledge SHOULD leverage the discovered Registrar to proceed with
        certificate enrollment and, if they do, MUST implement the EST options
        described in this section. The Pledge MAY perform alternative
        enrollment methods including discovering an alternate EST server, or
        proceed to use its IDevID credential indefinitely.</t>

        <section title="EST Distribution of CA Certificates">
          <t>The Pledge MUST request the full EST Distribution of CA
          Certificates message. See RFC7030, section 4.1.</t>

          <t>This ensures that the Pledge has the complete set of current CA
          certificates beyond the domainCAcert (see <xref
          target="AuditTokenResponse"></xref> for a discussion of the
          limitations). Although these restrictions are acceptable for a
          Registrar integrated with initial bootstrapping they are not
          appropriate for ongoing PKIX end entity certificate validation.</t>
        </section>

        <section title="EST CSR Attributes">
          <t>Automated bootstrapping occurs without local administrative
          configuration of the Pledge. In some deployments its plausible that
          the Pledge generates a certificate request containing only identity
          information known to the Pledge (essentially the IDevID information)
          and ultimately receives a certificate containing domain specific
          identity information. Conceptually the CA has complete control over
          all fields issued in the end entity certificate. Realistically this
          is operationally difficult with the current status of PKI
          certificate authority deployments where the CSR is submitted to the
          CA via a number of non-standard protocols.</t>

          <t>To alleviate operational difficulty the Pledge MUST request the
          EST "CSR Attributes" from the EST server. This allows the local
          infrastructure to inform the Pledge of the proper fields to include
          in the generated CSR.</t>

          <t>[[EDNOTE: The following is specific to anima purposes and should
          be moved to an appropriate anima document so as to keep
          bootstrapping as generic as possible: What we want are a 'domain
          name' stored in [TBD] and an 'ACP IPv6 address' stored in the
          iPAddress field as specified in RFC5208 s4.2.1.6. ref ACP draft
          where certificate verification [TBD]. These should go into the
          subjectaltname in the [TBD] fields.]]. If the hardwareModuleName in
          the IDevID is populated then it SHOULD by default be propagated to
          the LDevID along with the hwSerialNum. The registar SHOULD support
          local policy concerning this functionality. [[EDNOTE: extensive use
          of EST CSR Attributes might need an new OID definition]].]]</t>

          <t>The Registar MUST also confirm the resulting CSR is formatted as
          indicated before forwarding the request to a CA. If the Registar is
          communicating with the CA using a protocol like full CMC which
          provides mechanisms to override the CSR attributes, then these
          mechanisms MAY be used even if the client ignores CSR Attribute
          guidance.</t>
        </section>

        <section title="EST Client Certificate Request">
          <t>The Pledge MUST request a new client certificate. See RFC7030,
          section 4.2.</t>
        </section>

        <section title="Enrollment Status Telemetry">
          <t>For automated bootstrapping of devices the adminstrative elements
          providing bootstrapping also provide indications to the system
          administrators concerning device lifecycle status. This might
          include information concerning attempted bootstrapping messages seen
          by the client, MASA provides logs and status of credential
          enrollment. The EST protocol assumes an end user and therefore does
          not include a final success indication back to the server. This is
          insufficient for automated use cases.</t>

          <t>To indicate successful enrollment the client SHOULD re-negotiate
          the EST TLS session using the newly obtained credentials. This
          occurs by the client initiating a new TLS ClientHello message on the
          existing TLS connection. The client MAY simply close the old TLS
          session and start a new one. The server MUST support either
          model.</t>

          <t>In the case of a failure the Reason string indicates why the most
          recent enrollment failed. The SubjectKeyIdentifier field MUST be
          included if the enrollment attempt was for a keypair that is locally
          known to the client. If EST /serverkeygen was used and failed then
          the this field is ommited from the status telemetry.</t>

          <t>The client HTTP POSTs the following to the server at the new EST
          well known URI /enrollstatus.</t>

          <t><figure>
              <artwork><![CDATA[{
  "version":"1",
  "Status":TRUE /* TRUE=Success, FALSE=Fail"
  "Reason":"Informative human readable message"
  "SubjectKeyIdentifier":"<base64 encoded subjectkeyidentifier for the
                           enrollment that failed>"
}]]></artwork>
            </figure></t>

          <t>The server SHOULD respond with an HTTP 200 but MAY simply fail
          with an HTTP 404 error.</t>

          <t>Within the server logs the server MUST capture if this message
          was recieved over an TLS session with a matching client certificate.
          This allows for clients that wish to minimize their crypto
          operations to simpy POST this response without renegotiating the TLS
          session - at the cost of the server not being able to accurately
          verify that enrollment was truly successful.</t>
        </section>

        <section title="EST over CoAP">
          <t>[[EDNOTE: In order to support smaller devices the above section
          on Proxy behavior introduces mandatory to implement support for CoAP
          support by the Proxy. This implies similar support by the Pledge and
          Registrar and means that the EST protocol operation encapsulation
          into CoAP needs to be described. EST is HTTP based and "CoaP is
          designed to easily interface with HTTP for integration" [RFC7252].
          Use of CoAP implies Datagram TLS (DTLS) wherever this document
          describes TLS handshake specifics. A complexity is that the large
          message sizes necessary for bootstrapping will require support for
          [draft-ietf-core-block].]]</t>
        </section>
      </section>
    </section>

    <section anchor="reducedsecuritymodes"
             title="Reduced security operational modes">
      <t>A common requirement of bootstrapping is to support less secure
      operational modes for support specific use cases. The following sections
      detail specific ways that the Pledge, Registrar and MASA can be
      configured to run in a less secure mode for the indicated reasons.</t>

      <section title="Trust Model">
        <figure>
          <artwork><![CDATA[
+--------+         +---------+    +------------+     +------------+
| New    |         | Circuit |    | Domain     |     | Vendor     |
| Entity |         | Proxy   |    | Registrar  |     | Service    |
|        |         |         |    |            |     | (Internet  |
+--------+         +---------+    +------------+     +------------+
              ]]></artwork>

          <postamble>Figure 7</postamble>
        </figure>

        <t><list style="hanging">
            <t hangText="Pledge:">The Pledge could be compromised and
            providing an attack vector for malware. The entity is trusted to
            only imprint using secure methods described in this document.
            Additional endpoint assessment techniques are RECOMMENDED but are
            out-of-scope of this document.</t>

            <t hangText="Proxy:">Provides proxy functionalities but is not
            involved in security considerations.</t>

            <t hangText="Registrar:">When interacting with a MASA server a
            Registrar makes all decisions. When Ownership Vouchers are
            involved a Registrar is only a conduit and all security decisions
            are made on the vendor service.</t>

            <t hangText="Vendor Service, MASA:">This form of vendor service is
            trusted to accurately log all claim attempts and to provide
            authoritative log information to Registrars. The MASA does not
            know which devices are associated with which domains. These claims
            could be strengthened by using cryptographic log techniques to
            provide append only, cryptographic assured, publicly auditable
            logs. Current text provides only for a trusted vendor.</t>

            <t hangText="Vendor Service, Ownership Validation:">This form of
            vendor service is trusted to accurately know which device is owned
            by which domain.</t>
          </list></t>
      </section>

      <section title="New Entity security reductions">
        <t>The Pledge MAY support "trust on first use" on physical interfaces
        but MUST NOT support "trust on first use" on network interfaces. This
        is because "trust on first use" permanently degrades the security for
        all other use cases.</t>

        <t>The Pledge MAY have an operational mode where it skips Voucher
        validation one time. For example if a physical button is depressed
        during the bootstrapping operation. This can be useful if the vendor
        service is unavailable. This behavior SHOULD be available via local
        configuration or physical presence methods to ensure new entities can
        always be deployed even when autonomic methods fail. This allows for
        unsecured imprint.</t>

        <t>It is RECOMMENDED that this only be available if hardware assisted
        NEA [RFC5209] is supported.</t>
      </section>

      <section title="Registrar security reductions">
        <t>A Registrar can choose to accept devices using less secure methods.
        These methods are acceptable when low security models are needed, as
        the security decisions are being made by the local administrator, but
        they MUST NOT be the default behavior:<list style="numbers">
            <t>A registrar MAY choose to accept all devices, or all devices of
            a particular type, at the administrator's discretion. This could
            occur when informing all Registrars of unique identifiers of new
            entities might be operationally difficult.</t>

            <t>A registrar MAY choose to accept devices that claim a unique
            identity without the benefit of authenticating that claimed
            identity. This could occur when the Pledge does not include an
            X.509 IDevID factory installed credential. New Entities without an
            IDevID credential MAY form the <xref
            target="RequestAuditTokenFromRegistrar"></xref> request using the
            <xref target="RequestAuditToken"></xref> format to ensure the
            Pledge's serial number information is provided to the Registar
            (this includes the IDevIDAuthorityKeyIdentifier value which would
            be statically configured on the Pledge). The Pledge MAY refused to
            provide a TLS client certificate (as one is not available). The
            Pledge SHOULD support HTTP-based or certificate-less TLS
            authentication as described in EST RFC7030 section 3.3.2. A
            Registrar MUST NOT accept unauthenticated New Entities unless it
            has been configured to do so by an administrator that has verified
            that only expected new entities can communicate with a Registrar
            (presumably via a physically secured perimeter).</t>

            <t>A Registrar MAY request nonce-less Audit Vouchers from the MASA
            service (by not including a nonce in the request). These Audit
            Vouchers can then be transmitted to the Registrar and stored until
            they are needed during bootstrapping operations. This is for use
            cases where target network is protected by an air gap and
            therefore can not contact the MASA service during Pledge
            deployment.</t>

            <t>A registrar MAY ignore unrecognized nonce-less Audit Log
            entries. This could occur when used equipment is purchased with a
            valid history being deployed in air gap networks that required
            permanent Audit Vouchers.</t>
          </list></t>

        <t>These modes are not available for devices that require a vendor
        Ownership Voucher. The methods vendors use to determine which devices
        are owned by which domains is out-of-scope.</t>
      </section>

      <section title="MASA security reductions">
        <t>Lower security modes chosen by the MASA service effect all device
        deployments unless bound to the specific device identities. In which
        case these modes can be provided as additional features for specific
        customers. The MASA service can choose to run in less secure modes
        by:</t>

        <t><list style="numbers">
            <t>Not enforcing that a Nonce is in the Audit Voucher. This
            results in distribution of Audit Voucher that never expire and in
            effect makes the Domain an always trusted entity to the Pledge
            during any subsequent bootstrapping attempts. That this occurred
            is captured in the log information so that the Domain registrar
            can make appropriate security decisions when a Pledge joins the
            Domain. This is useful to support use cases where Registrars might
            not be online during actual device deployment. Because this
            results in long lived Audit Voucher and do not require the proof
            that the device is online this is only accepted when the Registrar
            is authenticated by the MASA server and authorized to provide this
            functionality. The MASA server is RECOMMENDED to use this
            functionality only in concert with Ownership Validation
            tracking.</t>

            <t>Not verifying ownership before responding with an Audit
            Voucher. This is expected to be a common operational model because
            doing so relieves the vendor providing MASA services from having
            to tracking ownership during shipping and supply chain and allows
            for a very low overhead MASA service. A Registrar uses the audit
            log information as a defense in depth strategy to ensure that this
            does not occur unexpectedly (for example when purchasing new
            equipment the Registrar would throw an error if any audit log
            information is reported).</t>
          </list></t>
      </section>
    </section>

    <section title="Security Considerations">
      <t>In order to support a wide variety of use cases, devices can be
      claimed by a registrar without proving possession of the device in
      question. This would result in a nonceless, and thus always valid,
      claim. Or would result in an invalid nonce being associated with a
      claim. The MASA service is required to authenticate such Registrars but
      no programmatic method is provided to ensure good behavior by the MASA
      service. Nonceless entries into the audit log therefore permanently
      reduce the value of a device because future Registrars, during future
      bootstrap attempts, would now have to be configured with policy to
      ignore previously (and potentially unknown) domains.</t>

      <t>Future registrars are recommended to take the audit history of a
      device into account when deciding to join such devices into their
      network. If the MASA server were to have allowed a significantly large
      number of claims this might become onerous to the MASA server which must
      maintain all the extra log entries. Ensuring a Registrar is
      representative of a valid customer domain even without validating
      ownership helps to mitigate this.</t>

      <t>It is possible for an attacker to send an authorization request to
      the MASA service directly after the real Registrar obtains an
      authorization log. If the attacker could also force the bootstrapping
      protocol to reset there is a theoretical opportunity for the attacker to
      use the Audit Voucher to take control of the Pledge but then proceed to
      enroll with the target domain. Possible prevention mechanisms
      include:</t>

      <t><list style="symbols">
          <t>Per device rate limits on the MASA service ensure such timing
          attacks are difficult.</t>

          <t>In the advent of an unexpectedly lost bootstrapping connection
          the Registrar repeats the request for audit log information.</t>
        </list></t>

      <t>To facilitate logging and administrative oversight the Pledge reports
      on Audit Voucher parsing status to the Registrar. In the case of a
      failure this information is informative to a potentially malicious
      Registar but this is RECOMMENDED anyway because of the operational
      benefits of an informed administrator in cases where the failure is
      indicative of a problem.</t>

      <t>As indicated in EST [RFC7030] the connection is provisional and
      untrusted until the server is successfully authorized. If the server
      provides a redirect response the client MUST follow the redirect but the
      connection remains provisional. If the client uses a well known URI for
      contacting a well known Registrar the EST Implicit Trust Anchor database
      is used as is described in RFC6125 to authenticate the well known URI.
      In this case the connection is not provisional and RFC6125 methods can
      be used for each subsequent redirection.</t>

      <t>To facilitate truely limited clients EST RFC7030 section 3.3.2
      requirements that the client MUST support a client authentication model
      have been reduced in <xref target="reducedsecuritymodes"></xref> to a
      statement that clients only "SHOULD" support such a model. This reflects
      current (not great) practices but is NOT RECOMMENDED.</t>

      <t>The MASA service could lock a claim and refuse to issue a new voucher
      or the MASA service could go offline (for example if a vendor went out
      of business). This functionality provides benefits such as theft
      resistance, but it also implies an operational risk to the Domain that
      Vendor behavior could limit future bootstrapping of the device by the
      Domain. This can be mitigated by Registrars that request nonce-less
      Audit Vouchers.</t>

      <section title="Security concerns with discovery process">
        <section title="Discovery of Registrar by Proxy">
          <t>As described in section <xref target="proxybehaviour"></xref>,
          the RECOMMENDED mechanism is for the proxy to discover the address
          of the registrar via GRASP <xref
          target="I-D.ietf-anima-grasp"></xref></t>

          <t>GRASP is intended to run over a secured, and private Autonomic
          Control Plan <xref
          target="I-D.ietf-anima-autonomic-control-plane"></xref>. This
          discovery is between the already registered Registrar, and the
          already registered Proxy. There are no GRASP security issues with
          this part, as both entities will have already joined the secured
          ACP.</t>
        </section>

        <section title="Discovery of Proxy by New Entity">
          <t>[[EDNOTE: To be discussed]]</t>
        </section>
      </section>
    </section>

    <section title="Acknowledgements">
      <t>We would like to thank the various reviewers for their input, in
      particular
      Brian Carpenter,
      Toerless Eckert,
      Fuyu Eleven,
      Eliot Lear,
      Sergey Kasatkin,
      Markus Stenberg,
      and Peter van der Stok</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &RFC2119;

      &RFC7030;

      &RFC5652;

      &RFC5280;

      <?rfc include="reference.RFC.3542" ?>

      <?rfc include="reference.RFC.5386" ?>

      <?rfc include="reference.RFC.5660" ?>

      <?rfc include="reference.RFC.7228" ?>

      <?rfc include="reference.RFC.6762" ?>

      <?rfc include="reference.RFC.6763" ?>

      <?rfc include="reference.RFC.3927" ?>

      <?rfc include="reference.RFC.4862" ?>

      <?rfc include="reference.I-D.ietf-anima-voucher" ?>

      <reference anchor="IDevID"
                 target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
        <front>
          <title>IEEE 802.1AR Secure Device Identifier</title>

          <author surname="IEEE Standard"></author>

          <date month="December" year="2009" />
        </front>
      </reference>
    </references>

    <references title="Informative References">
      &I-D.behringer-autonomic-network-framework;

      <?rfc include="reference.RFC.7435" ?>
      &RFC7575;

      <?rfc include="reference.I-D.ietf-anima-autonomic-control-plane" ?>

      <?rfc include="reference.I-D.ietf-ace-actors" ?>

      <?rfc include="reference.I-D.ietf-anima-grasp" ?>

      <?rfc include="reference.I-D.richardson-anima-state-for-joinrouter" ?>

      <?rfc include="reference.I-D.lear-mud-framework" ?>

      <?rfc include="reference.I-D.ietf-netconf-zerotouch" ?>

      <reference anchor="imprinting"
                 target="https://en.wikipedia.org/wiki/Imprinting_(psychology)">
        <front>
          <title>Wikipedia article: Imprinting</title>

          <author surname="Wikipedia"></author>

          <date month="July" year="2015" />
        </front>
      </reference>

      <reference anchor="Stajano99theresurrecting"
                 target="https://www.cl.cam.ac.uk/~fms27/papers/1999-StajanoAnd-duckling.pdf">
        <front>
          <title>The resurrecting duckling: security issues for ad-hoc
          wireless networks</title>

          <author fullname="Frank Stajano" initials="F." surname="Stajano"></author>

          <author fullname="Ross Anderson" initials="R." surname="Anderson"></author>

          <date year="1999" />
        </front>
      </reference>

      <!-- http://dictionary.reference.com/cite.html?qh=pledge&ia=luna
           @article {Dictionary.com2015,
           title = {Dictionary.com Unabridged},
           month = {Jul},
           day = {03},
           year = {2015},
           url = {http://dictionary.reference.com/browse/pledge},
           } -->

      <reference anchor="pledge"
                 target="http://dictionary.reference.com/browse/pledge">
        <front>
          <title>Dictionary.com Unabridged</title>

          <author surname="Dictionary.com"></author>

          <date month="July" year="2015" />
        </front>
      </reference>
    </references>
  </back>
</rfc>
<!--
    Local Variables:
    mode: xml
    End:
-->
